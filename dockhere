#!/usr/bin/env python3
import logging
import os
import argparse
import platform
import sys
import hiyapyco
import yaml


DEFAULT_REGISTRY = "docker.io"
DEFAULT_IMAGE = "ubuntu:latest"
DEFAULT_CMD = "/bin/bash"

DEFAULT_CONFIG = yaml.dump({
    'registries': {
        'docker': 'docker.io',
        'dockerhub': 'docker.io',
        'hub': 'docker.io',
        'ghcr': 'ghcr.io',
        'github': 'ghcr.io',
        'ecr': 'public.ecr.aws',
    },
    'volumes': [],
    'volumeMap': {},
    'pull': False,
    'defaultRegistry': 'docker.io',
    'arch': platform.machine().lower(),
    'image': DEFAULT_IMAGE,
    'cmd': DEFAULT_CMD,
    'args': [],
})
HOME_CONFIG_PATH = os.path.expanduser("~/.dockhere.yaml")
LOCAL_CONFIG_PATH = "./.dockhere.yaml"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     argument_default=argparse.SUPPRESS)

    parser.add_argument('-p', "--pull", action='store_true', help='pull the requested container')
    parser.add_argument('-r', '--registry', help='pick a default registry')
    parser.add_argument('-a', '--arch', help='specify a system architecture')
    parser.add_argument('-c', '--config', default=LOCAL_CONFIG_PATH, help='path to config file')
    parser.add_argument('-i', '--image', help='image name in image:tag format')
    parser.add_argument('cmd', nargs='?', help='command to run')
    parser.add_argument('args', nargs=argparse.REMAINDER, help='arguments for cmd')

    args = parser.parse_args()

    if args.config != LOCAL_CONFIG_PATH and not os.path.exists(args.config):
        print(f'could not find config {args.config}')
        sys.exit(1)

    cli_args = {}
    for arg in ['pull', 'arch', 'image', 'cmd', 'args']:
        if hasattr(args, arg):
            cli_args[arg] = getattr(args, arg)

    config = hiyapyco.load(DEFAULT_CONFIG, HOME_CONFIG_PATH, args.config, yaml.dump(cli_args), method=hiyapyco.METHOD_MERGE, failonmissingfiles=False, loglevelmissingfiles=logging.DEBUG)

    # Clear the CLI args when we override the command but not the arguments
    if hasattr(args, 'cmd') and not hasattr(args, 'args'):
        config['args'] = []
    # We use a different name for the registry CLI arg than in the config
    if hasattr(args, 'registry'):
        config['defaultRegistry'] = args.registry

    registry_id = config['defaultRegistry']
    registry = registry_id
    if registry_id in config['registries']:
        registry = config['registries'][registry_id]

    image = f'{registry}/{config['image']}'

    docker_cmd = ["docker", "run", "--interactive", "--tty", "--rm", "--arch", config['arch']]
    if config['pull']:
        docker_cmd += ["--pull", "always"]

    for v in config['volumes']:
        docker_cmd += ["--volume", v]

    pwd = os.path.abspath(os.getcwd())
    dest_path = None

    for host_path, cont_path in config['volumeMap'].items():
        host_path = os.path.abspath(host_path)
        if pwd.startswith(host_path):
            if host_path == pwd:
                dest_path = cont_path
            else:
                dest_path = f'{cont_path}{pwd[len(host_path)+1:]}'
            break

    if dest_path is None:
        print(f"WARNING: Failed to find container path for {pwd}\n")
    else:
        docker_cmd += ["--workdir", dest_path]

    docker_cmd.append(image)
    docker_cmd.append(config['cmd'])
    docker_cmd += config['args']

    os.execvp(docker_cmd[0], docker_cmd)