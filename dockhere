#!/usr/bin/env python3
import base64
import logging
import os
import argparse
import platform
import sys
import hiyapyco
import yaml

DEBUG = False

DEFAULT_REGISTRY = "docker.io"
DEFAULT_IMAGE = "ubuntu:latest"
DEFAULT_CMD = "/bin/bash"

CACHE_PATH = os.path.expanduser(os.getenv("DOCKHERE_CACHE", "~/.cache/dockhere"))
_loaded_cache = None

# Never pass these environment variables
DEFAULT_SKIP_PASS_ENV = [
    "LOGNAME", "PATH", "HOME", "HOSTNAME", "USER", "TMPDIR", "ARCH", "PWD",
    "LC_CTYPE", "SHELL", "SHLVL",

    # Security
    "SSH_AUTH_SOCK",

    # Apple
    "TERM_SESSION_ID", "TERM_PROGRAM_VERSION", "TERM_PROGRAM", "XPC_SERVICE_NAME",
    "XPC_FLAGS",

    # Homebrew
    "HOMEBREW_PREFIX", "HOMEBREW_REPOSITORY", "HOMEBREW_PREFIX", "HOMEBREW_CELLAR",

    # Paths that will not work
    "MANPATH", "INFOPATH",
]

DEFAULT_CONFIG = yaml.dump({
    'registries': {
        'docker': 'docker.io',
        'dockerhub': 'docker.io',
        'hub': 'docker.io',
        'ghcr': 'ghcr.io',
        'github': 'ghcr.io',
        'ecr': 'public.ecr.aws',
    },
    'volumes': [],
    'volumeMap': {},
    'pull': False,
    'defaultRegistry': 'docker.io',
    'arch': platform.machine().lower(),
    'image': DEFAULT_IMAGE,
    'cmd': DEFAULT_CMD,
    'args': [],
    'env': [],
    'skipClientEnv': DEFAULT_SKIP_PASS_ENV,
    'cli_args': [],
    'cli_binary': 'docker',
    'cli_mode': 'run',
})
HOME_CONFIG_PATH = os.path.expanduser("~/.dockhere.yaml")
LOCAL_CONFIG_PATH = "./.dockhere.yaml"


def split_env(varlist, envvars=None):
    if envvars is None:
        envvars = {}

    for ev in varlist:
        if '=' not in ev:
            raise Exception(f'invalid environment variable "{ev}"')
        evv = ev.split('=', 1)
        envvars[evv[0]] = evv[1]

    return envvars


def truthy(v):
    return v.lower() in ['true', '1', 'yes', 'y', 't', 'on']


def get_cache():
    global _loaded_cache

    if _loaded_cache is not None:
        return _loaded_cache

    if not os.path.exists(CACHE_PATH):
        _loaded_cache = {}
        return _loaded_cache

    if DEBUG:
        print(f'Loading cache from {CACHE_PATH}')

    with open(CACHE_PATH, 'r') as fh:
        _loaded_cache = yaml.safe_load(fh)
        return _loaded_cache


def save_cache():
    cache_yaml = yaml.dump(get_cache())

    if DEBUG:
        print(f'Saving cache to {CACHE_PATH}')

    with open(CACHE_PATH, 'w') as fh:
        fh.write(cache_yaml)


def get_last_run_arch(image):
    cached = get_cache()
    image = base64.b64encode(bytes(image, "utf-8")).decode("utf-8")
    if 'lastArch' not in cached or image not in cached['lastArch']:
        return None
    return cached['lastArch'][image]


def set_last_run_arch(image, arch):
    cached = get_cache()
    image = base64.b64encode(bytes(image, "utf-8")).decode("utf-8")
    if 'lastArch' not in cached:
        cached['lastArch'] = {}
    cached['lastArch'][image] = arch


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     argument_default=argparse.SUPPRESS)

    parser.add_argument('-p', "--pull", action='store_true', help='pull the requested container')
    parser.add_argument('-r', '--registry', dest='defaultRegistry', help='pick a default registry')
    parser.add_argument('-a', '--arch', help='specify a system architecture')
    parser.add_argument('-c', '--config', default=LOCAL_CONFIG_PATH, help='path to config file')
    parser.add_argument('-i', '--image', help='image name in image:tag format')
    parser.add_argument('-e', '--env', action='append', help='set environment variables')
    parser.add_argument('--client-env', action='store_true', default=False, help='pass the entire client environment')

    parser.add_argument('cmd', nargs='?', help='command to run')
    parser.add_argument('args', nargs=argparse.REMAINDER, help='arguments for cmd')

    parser.add_argument('--debug', action='store_true', default=False, help='enable dockhere debugging')

    parser.add_argument('--cli-mode', default='run', help='docker command to run')
    parser.add_argument('--cli-binary', default='docker', help='name or path of the docker binary')

    # TODO: argparse does not like this, but it would still be nice to be able to pass this kind of thing to docker
    # parser.add_argument("--cli-arg", action='append', dest='cli_args', help='extra arguments for docker itself')

    args = parser.parse_args()

    DEBUG = args.debug
    if DEBUG:
        print(args)

    if args.config != LOCAL_CONFIG_PATH and not os.path.exists(args.config):
        print(f'could not find config {args.config}')
        sys.exit(1)

    cli_opts = {}
    for arg in ['pull', 'arch', 'image', 'cmd', 'args', 'defaultRegistry', 'cli_binary', 'cli_args', 'cli_mode']:
        if hasattr(args, arg):
            cli_opts[arg] = getattr(args, arg)

    config = hiyapyco.load(DEFAULT_CONFIG, HOME_CONFIG_PATH, args.config, yaml.dump(cli_opts),
                           method=hiyapyco.METHOD_MERGE, failonmissingfiles=False, loglevelmissingfiles=logging.DEBUG)

    if DEBUG:
        print(hiyapyco.dump(config))

    # Clear the CLI args when we override the command but not the arguments
    if hasattr(args, 'cmd') and not hasattr(args, 'args'):
        config['args'] = []

    registry_id = config['defaultRegistry']
    if DEBUG:
        print(f'Using default registry: {registry_id}')

    registry = registry_id
    if registry_id in config['registries']:
        registry = config['registries'][registry_id]

    image = f'{registry}/{config['image']}'

    if DEBUG:
        print(f'Using image: {image}')

    docker_cmd = [config['cli_binary']]

    if config['cli_mode'] == 'run':
        docker_cmd += ["run", "--interactive", "--tty", "--rm"]
    else:
        print(f'Unsupported mode {config['cli_mode']}')
        sys.exit(1)

    docker_cmd += ["--arch", config['arch']]
    last_arch = get_last_run_arch(image)
    if last_arch is not None and last_arch != config['arch']:
        print(f'Architecture changed since last run, forcing a pull ({last_arch} => {config['arch']})')
        config['pull'] = True

    if config['pull']:
        docker_cmd += ["--pull", "always"]

    for v in config['volumes']:
        docker_cmd += ["--volume", v]

    # Change the working directory to our translated cwd
    pwd = os.path.abspath(os.getcwd())
    dest_path = None
    for host_path, cont_path in config['volumeMap'].items():
        host_path = os.path.abspath(host_path)
        if pwd.startswith(host_path):
            if host_path == pwd:
                dest_path = cont_path
            else:
                dest_path = f'{cont_path}{pwd[len(host_path) + 1:]}'
            if DEBUG:
                print(f'Mapping current directory to {dest_path}')
            break

    if dest_path is None:
        print(f"WARNING: Failed to find container path for {pwd}\n")
    else:
        docker_cmd += ["--workdir", dest_path]

    # Process the environment variables
    envvars = {}
    skip_env_underscore = not truthy(os.getenv("DOCKHERE_NOSKIP_UNDERSCORE", "false"))
    if not skip_env_underscore and DEBUG:
        print(f'Not skipping environment variables starting with an underscore')
    if args.client_env:
        if DEBUG:
            print(f'Passing all client environment variables')
        for k, v in os.environ.items():
            if k in config['skipClientEnv']:
                continue

            # Skip everything with an underscore in it
            if skip_env_underscore and k.startswith("_"):
                continue

            envvars[k] = v
    envvars = split_env(config['env'], envvars)
    if hasattr(args, 'env'):
        envvars = split_env(args.env, envvars)
    # We always want to pass the TERM variable
    envvars["TERM"] = os.getenv("TERM", "xterm")

    # Set the environment variables
    for k, v in envvars.items():
        docker_cmd += ["--env", f'{k}={v}']

    # Add override arguments
    for a in config['cli_args']:
        docker_cmd.append(a)

    docker_cmd.append(image)
    docker_cmd.append(config['cmd'])
    docker_cmd += config['args']

    set_last_run_arch(image, config['arch'])

    # We must always save the cache now, as the exec below will assume the process
    save_cache()

    if DEBUG:
        print(f'\n{' '.join(docker_cmd)}\n\n')

    os.execvp(docker_cmd[0], docker_cmd)
